// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/driver005/oauth/models"
	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
)

// register flags to command
func registerClientFlags(cmdPrefix string, cmd *cobra.Command) error {

	if err := registerClientBackChannelLogoutSessionRequired(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientBackChannelLogoutURI(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientClientURI(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientCreatedAt(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientFrontChannelLogoutSessionRequired(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientFrontChannelLogoutURI(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientJSONWebKeysURI(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientLogoURI(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientName(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientOutfacingID(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientOwner(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientPolicyURI(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientRequestObjectSigningAlgorithm(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientScope(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientSecret(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientSecretExpiresAt(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientSectorIdentifierURI(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientSubjectType(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientTermsOfServiceURI(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientTokenEndpointAuthMethod(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientTokenEndpointAuthSigningAlgorithm(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientUpdatedAt(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientUserinfoSignedResponseAlg(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientAllowedCorsOrigins(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientAudience(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientContacts(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientGrantTypes(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientJwks(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientMetadata(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientPostLogoutRedirectUris(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientRedirectUris(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientRequestUris(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClientResponseTypes(cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerClientBackChannelLogoutSessionRequired(cmdPrefix string, cmd *cobra.Command) error {

	backChannelLogoutSessionRequiredDescription := `Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout
Token to identify the RP session with the OP when the backchannel_logout_uri is used.
If omitted, the default value is false.`

	var backChannelLogoutSessionRequiredFlagName string
	if cmdPrefix == "" {
		backChannelLogoutSessionRequiredFlagName = "BackChannelLogoutSessionRequired"
	} else {
		backChannelLogoutSessionRequiredFlagName = fmt.Sprintf("%v.BackChannelLogoutSessionRequired", cmdPrefix)
	}

	var backChannelLogoutSessionRequiredFlagDefault bool

	_ = cmd.PersistentFlags().Bool(backChannelLogoutSessionRequiredFlagName, backChannelLogoutSessionRequiredFlagDefault, backChannelLogoutSessionRequiredDescription)

	return nil
}

func registerClientBackChannelLogoutURI(cmdPrefix string, cmd *cobra.Command) error {

	backChannelLogoutUriDescription := `RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.`

	var backChannelLogoutUriFlagName string
	if cmdPrefix == "" {
		backChannelLogoutUriFlagName = "BackChannelLogoutURI"
	} else {
		backChannelLogoutUriFlagName = fmt.Sprintf("%v.BackChannelLogoutURI", cmdPrefix)
	}

	var backChannelLogoutUriFlagDefault string

	_ = cmd.PersistentFlags().String(backChannelLogoutUriFlagName, backChannelLogoutUriFlagDefault, backChannelLogoutUriDescription)

	return nil
}

func registerClientClientURI(cmdPrefix string, cmd *cobra.Command) error {

	clientUriDescription := `ClientURI is an URL string of a web page providing information about the client.
If present, the server SHOULD display this URL to the end-user in
a clickable fashion.`

	var clientUriFlagName string
	if cmdPrefix == "" {
		clientUriFlagName = "ClientURI"
	} else {
		clientUriFlagName = fmt.Sprintf("%v.ClientURI", cmdPrefix)
	}

	var clientUriFlagDefault string

	_ = cmd.PersistentFlags().String(clientUriFlagName, clientUriFlagDefault, clientUriDescription)

	return nil
}

func registerClientCreatedAt(cmdPrefix string, cmd *cobra.Command) error {

	createdAtDescription := `CreatedAt returns the timestamp of the client's creation.`

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "CreatedAt"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(createdAtFlagName, "", createdAtDescription)

	return nil
}

func registerClientFrontChannelLogoutSessionRequired(cmdPrefix string, cmd *cobra.Command) error {

	frontChannelLogoutSessionRequiredDescription := `Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be
included to identify the RP session with the OP when the frontchannel_logout_uri is used.
If omitted, the default value is false.`

	var frontChannelLogoutSessionRequiredFlagName string
	if cmdPrefix == "" {
		frontChannelLogoutSessionRequiredFlagName = "FrontChannelLogoutSessionRequired"
	} else {
		frontChannelLogoutSessionRequiredFlagName = fmt.Sprintf("%v.FrontChannelLogoutSessionRequired", cmdPrefix)
	}

	var frontChannelLogoutSessionRequiredFlagDefault bool

	_ = cmd.PersistentFlags().Bool(frontChannelLogoutSessionRequiredFlagName, frontChannelLogoutSessionRequiredFlagDefault, frontChannelLogoutSessionRequiredDescription)

	return nil
}

func registerClientFrontChannelLogoutURI(cmdPrefix string, cmd *cobra.Command) error {

	frontChannelLogoutUriDescription := `RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query
parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the
request and to determine which of the potentially multiple sessions is to be logged out; if either is
included, both MUST be.`

	var frontChannelLogoutUriFlagName string
	if cmdPrefix == "" {
		frontChannelLogoutUriFlagName = "FrontChannelLogoutURI"
	} else {
		frontChannelLogoutUriFlagName = fmt.Sprintf("%v.FrontChannelLogoutURI", cmdPrefix)
	}

	var frontChannelLogoutUriFlagDefault string

	_ = cmd.PersistentFlags().String(frontChannelLogoutUriFlagName, frontChannelLogoutUriFlagDefault, frontChannelLogoutUriDescription)

	return nil
}

func registerClientJSONWebKeysURI(cmdPrefix string, cmd *cobra.Command) error {

	jsonWebKeysUriDescription := `URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains
the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the
Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing
and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced
JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both
signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used
to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST
match those in the certificate.`

	var jsonWebKeysUriFlagName string
	if cmdPrefix == "" {
		jsonWebKeysUriFlagName = "JSONWebKeysURI"
	} else {
		jsonWebKeysUriFlagName = fmt.Sprintf("%v.JSONWebKeysURI", cmdPrefix)
	}

	var jsonWebKeysUriFlagDefault string

	_ = cmd.PersistentFlags().String(jsonWebKeysUriFlagName, jsonWebKeysUriFlagDefault, jsonWebKeysUriDescription)

	return nil
}

func registerClientLogoURI(cmdPrefix string, cmd *cobra.Command) error {

	logoUriDescription := `LogoURI is an URL string that references a logo for the client.`

	var logoUriFlagName string
	if cmdPrefix == "" {
		logoUriFlagName = "LogoURI"
	} else {
		logoUriFlagName = fmt.Sprintf("%v.LogoURI", cmdPrefix)
	}

	var logoUriFlagDefault string

	_ = cmd.PersistentFlags().String(logoUriFlagName, logoUriFlagDefault, logoUriDescription)

	return nil
}

func registerClientName(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `Name is the human-readable string name of the client to be presented to the
end-user during authorization.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerClientOutfacingID(cmdPrefix string, cmd *cobra.Command) error {

	outfacingIdDescription := `ID  is the id for this client.`

	var outfacingIdFlagName string
	if cmdPrefix == "" {
		outfacingIdFlagName = "OutfacingID"
	} else {
		outfacingIdFlagName = fmt.Sprintf("%v.OutfacingID", cmdPrefix)
	}

	var outfacingIdFlagDefault string

	_ = cmd.PersistentFlags().String(outfacingIdFlagName, outfacingIdFlagDefault, outfacingIdDescription)

	return nil
}

func registerClientOwner(cmdPrefix string, cmd *cobra.Command) error {

	ownerDescription := `Owner is a string identifying the owner of the OAuth 2.0 Client.`

	var ownerFlagName string
	if cmdPrefix == "" {
		ownerFlagName = "Owner"
	} else {
		ownerFlagName = fmt.Sprintf("%v.Owner", cmdPrefix)
	}

	var ownerFlagDefault string

	_ = cmd.PersistentFlags().String(ownerFlagName, ownerFlagDefault, ownerDescription)

	return nil
}

func registerClientPolicyURI(cmdPrefix string, cmd *cobra.Command) error {

	policyUriDescription := `PolicyURI is a URL string that points to a human-readable privacy policy document
that describes how the deployment organization collects, uses,
retains, and discloses personal data.`

	var policyUriFlagName string
	if cmdPrefix == "" {
		policyUriFlagName = "PolicyURI"
	} else {
		policyUriFlagName = fmt.Sprintf("%v.PolicyURI", cmdPrefix)
	}

	var policyUriFlagDefault string

	_ = cmd.PersistentFlags().String(policyUriFlagName, policyUriFlagDefault, policyUriDescription)

	return nil
}

func registerClientRequestObjectSigningAlgorithm(cmdPrefix string, cmd *cobra.Command) error {

	requestObjectSigningAlgorithmDescription := `JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects
from this Client MUST be rejected, if not signed with this algorithm.`

	var requestObjectSigningAlgorithmFlagName string
	if cmdPrefix == "" {
		requestObjectSigningAlgorithmFlagName = "RequestObjectSigningAlgorithm"
	} else {
		requestObjectSigningAlgorithmFlagName = fmt.Sprintf("%v.RequestObjectSigningAlgorithm", cmdPrefix)
	}

	var requestObjectSigningAlgorithmFlagDefault string

	_ = cmd.PersistentFlags().String(requestObjectSigningAlgorithmFlagName, requestObjectSigningAlgorithmFlagDefault, requestObjectSigningAlgorithmDescription)

	return nil
}

func registerClientScope(cmdPrefix string, cmd *cobra.Command) error {

	scopeDescription := `Scope is a string containing a space-separated list of scope values (as
described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client
can use when requesting access tokens.`

	var scopeFlagName string
	if cmdPrefix == "" {
		scopeFlagName = "Scope"
	} else {
		scopeFlagName = fmt.Sprintf("%v.Scope", cmdPrefix)
	}

	var scopeFlagDefault string

	_ = cmd.PersistentFlags().String(scopeFlagName, scopeFlagDefault, scopeDescription)

	return nil
}

func registerClientSecret(cmdPrefix string, cmd *cobra.Command) error {

	secretDescription := `Secret is the client's secret. The secret will be included in the create request as cleartext, and then
never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users
that they need to write the secret down as it will not be made available again.`

	var secretFlagName string
	if cmdPrefix == "" {
		secretFlagName = "Secret"
	} else {
		secretFlagName = fmt.Sprintf("%v.Secret", cmdPrefix)
	}

	var secretFlagDefault string

	_ = cmd.PersistentFlags().String(secretFlagName, secretFlagDefault, secretDescription)

	return nil
}

func registerClientSecretExpiresAt(cmdPrefix string, cmd *cobra.Command) error {

	secretExpiresAtDescription := `SecretExpiresAt is an integer holding the time at which the client
secret will expire or 0 if it will not expire. The time is
represented as the number of seconds from 1970-01-01T00:00:00Z as
measured in UTC until the date/time of expiration.

This feature is currently not supported and it's value will always
be set to 0.`

	var secretExpiresAtFlagName string
	if cmdPrefix == "" {
		secretExpiresAtFlagName = "SecretExpiresAt"
	} else {
		secretExpiresAtFlagName = fmt.Sprintf("%v.SecretExpiresAt", cmdPrefix)
	}

	var secretExpiresAtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(secretExpiresAtFlagName, secretExpiresAtFlagDefault, secretExpiresAtDescription)

	return nil
}

func registerClientSectorIdentifierURI(cmdPrefix string, cmd *cobra.Command) error {

	sectorIdentifierUriDescription := `URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a
file with a single JSON array of redirect_uri values.`

	var sectorIdentifierUriFlagName string
	if cmdPrefix == "" {
		sectorIdentifierUriFlagName = "SectorIdentifierURI"
	} else {
		sectorIdentifierUriFlagName = fmt.Sprintf("%v.SectorIdentifierURI", cmdPrefix)
	}

	var sectorIdentifierUriFlagDefault string

	_ = cmd.PersistentFlags().String(sectorIdentifierUriFlagName, sectorIdentifierUriFlagDefault, sectorIdentifierUriDescription)

	return nil
}

func registerClientSubjectType(cmdPrefix string, cmd *cobra.Command) error {

	subjectTypeDescription := `SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a
list of the supported subject_type values for this server. Valid types include ` + "`" + `pairwise` + "`" + ` and ` + "`" + `public` + "`" + `.`

	var subjectTypeFlagName string
	if cmdPrefix == "" {
		subjectTypeFlagName = "SubjectType"
	} else {
		subjectTypeFlagName = fmt.Sprintf("%v.SubjectType", cmdPrefix)
	}

	var subjectTypeFlagDefault string

	_ = cmd.PersistentFlags().String(subjectTypeFlagName, subjectTypeFlagDefault, subjectTypeDescription)

	return nil
}

func registerClientTermsOfServiceURI(cmdPrefix string, cmd *cobra.Command) error {

	termsOfServiceUriDescription := `TermsOfServiceURI is a URL string that points to a human-readable terms of service
document for the client that describes a contractual relationship
between the end-user and the client that the end-user accepts when
authorizing the client.`

	var termsOfServiceUriFlagName string
	if cmdPrefix == "" {
		termsOfServiceUriFlagName = "TermsOfServiceURI"
	} else {
		termsOfServiceUriFlagName = fmt.Sprintf("%v.TermsOfServiceURI", cmdPrefix)
	}

	var termsOfServiceUriFlagDefault string

	_ = cmd.PersistentFlags().String(termsOfServiceUriFlagName, termsOfServiceUriFlagDefault, termsOfServiceUriDescription)

	return nil
}

func registerClientTokenEndpointAuthMethod(cmdPrefix string, cmd *cobra.Command) error {

	tokenEndpointAuthMethodDescription := `Requested Client Authentication method for the Token Endpoint. The options are client_secret_post,
client_secret_basic, private_key_jwt, and none.`

	var tokenEndpointAuthMethodFlagName string
	if cmdPrefix == "" {
		tokenEndpointAuthMethodFlagName = "TokenEndpointAuthMethod"
	} else {
		tokenEndpointAuthMethodFlagName = fmt.Sprintf("%v.TokenEndpointAuthMethod", cmdPrefix)
	}

	var tokenEndpointAuthMethodFlagDefault string

	_ = cmd.PersistentFlags().String(tokenEndpointAuthMethodFlagName, tokenEndpointAuthMethodFlagDefault, tokenEndpointAuthMethodDescription)

	return nil
}

func registerClientTokenEndpointAuthSigningAlgorithm(cmdPrefix string, cmd *cobra.Command) error {

	tokenEndpointAuthSigningAlgorithmDescription := `Requested Client Authentication signing algorithm for the Token Endpoint.`

	var tokenEndpointAuthSigningAlgorithmFlagName string
	if cmdPrefix == "" {
		tokenEndpointAuthSigningAlgorithmFlagName = "TokenEndpointAuthSigningAlgorithm"
	} else {
		tokenEndpointAuthSigningAlgorithmFlagName = fmt.Sprintf("%v.TokenEndpointAuthSigningAlgorithm", cmdPrefix)
	}

	var tokenEndpointAuthSigningAlgorithmFlagDefault string

	_ = cmd.PersistentFlags().String(tokenEndpointAuthSigningAlgorithmFlagName, tokenEndpointAuthSigningAlgorithmFlagDefault, tokenEndpointAuthSigningAlgorithmDescription)

	return nil
}

func registerClientUpdatedAt(cmdPrefix string, cmd *cobra.Command) error {

	updatedAtDescription := `UpdatedAt returns the timestamp of the last update.`

	var updatedAtFlagName string
	if cmdPrefix == "" {
		updatedAtFlagName = "UpdatedAt"
	} else {
		updatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updatedAtFlagName, "", updatedAtDescription)

	return nil
}

func registerClientUserinfoSignedResponseAlg(cmdPrefix string, cmd *cobra.Command) error {

	userinfoSignedResponseAlgDescription := `JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT
[JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims
as a UTF-8 encoded JSON object using the application/json content-type.`

	var userinfoSignedResponseAlgFlagName string
	if cmdPrefix == "" {
		userinfoSignedResponseAlgFlagName = "UserinfoSignedResponseAlg"
	} else {
		userinfoSignedResponseAlgFlagName = fmt.Sprintf("%v.UserinfoSignedResponseAlg", cmdPrefix)
	}

	var userinfoSignedResponseAlgFlagDefault string

	_ = cmd.PersistentFlags().String(userinfoSignedResponseAlgFlagName, userinfoSignedResponseAlgFlagDefault, userinfoSignedResponseAlgDescription)

	return nil
}

func registerClientAllowedCorsOrigins(cmdPrefix string, cmd *cobra.Command) error {
	// warning: allowed_cors_origins StringSlicePipeDelimiter array type is not supported by go-swagger cli yet

	return nil
}

func registerClientAudience(cmdPrefix string, cmd *cobra.Command) error {
	// warning: audience StringSlicePipeDelimiter array type is not supported by go-swagger cli yet

	return nil
}

func registerClientContacts(cmdPrefix string, cmd *cobra.Command) error {
	// warning: contacts StringSlicePipeDelimiter array type is not supported by go-swagger cli yet

	return nil
}

func registerClientGrantTypes(cmdPrefix string, cmd *cobra.Command) error {
	// warning: grant_types StringSlicePipeDelimiter array type is not supported by go-swagger cli yet

	return nil
}

func registerClientJwks(cmdPrefix string, cmd *cobra.Command) error {
	// warning: jwks JoseJSONWebKeySet map type is not supported by go-swagger cli yet

	return nil
}

func registerClientMetadata(cmdPrefix string, cmd *cobra.Command) error {
	// warning: metadata JSONRawMessage map type is not supported by go-swagger cli yet

	return nil
}

func registerClientPostLogoutRedirectUris(cmdPrefix string, cmd *cobra.Command) error {
	// warning: post_logout_redirect_uris StringSlicePipeDelimiter array type is not supported by go-swagger cli yet

	return nil
}

func registerClientRedirectUris(cmdPrefix string, cmd *cobra.Command) error {
	// warning: redirect_uris StringSlicePipeDelimiter array type is not supported by go-swagger cli yet

	return nil
}

func registerClientRequestUris(cmdPrefix string, cmd *cobra.Command) error {
	// warning: request_uris StringSlicePipeDelimiter array type is not supported by go-swagger cli yet

	return nil
}

func registerClientResponseTypes(cmdPrefix string, cmd *cobra.Command) error {
	// warning: response_types StringSlicePipeDelimiter array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveClientFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, backChannelLogoutSessionRequiredAdded := retrieveClientBackChannelLogoutSessionRequiredFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || backChannelLogoutSessionRequiredAdded

	err, backChannelLogoutUriAdded := retrieveClientBackChannelLogoutURIFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || backChannelLogoutUriAdded

	err, clientUriAdded := retrieveClientClientURIFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientUriAdded

	err, createdAtAdded := retrieveClientCreatedAtFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, frontChannelLogoutSessionRequiredAdded := retrieveClientFrontChannelLogoutSessionRequiredFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frontChannelLogoutSessionRequiredAdded

	err, frontChannelLogoutUriAdded := retrieveClientFrontChannelLogoutURIFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frontChannelLogoutUriAdded

	err, jsonWebKeysUriAdded := retrieveClientJSONWebKeysURIFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jsonWebKeysUriAdded

	err, logoUriAdded := retrieveClientLogoURIFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logoUriAdded

	err, nameAdded := retrieveClientNameFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, outfacingIdAdded := retrieveClientOutfacingIDFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || outfacingIdAdded

	err, ownerAdded := retrieveClientOwnerFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ownerAdded

	err, policyUriAdded := retrieveClientPolicyURIFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || policyUriAdded

	err, requestObjectSigningAlgorithmAdded := retrieveClientRequestObjectSigningAlgorithmFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || requestObjectSigningAlgorithmAdded

	err, scopeAdded := retrieveClientScopeFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeAdded

	err, secretAdded := retrieveClientSecretFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || secretAdded

	err, secretExpiresAtAdded := retrieveClientSecretExpiresAtFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || secretExpiresAtAdded

	err, sectorIdentifierUriAdded := retrieveClientSectorIdentifierURIFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sectorIdentifierUriAdded

	err, subjectTypeAdded := retrieveClientSubjectTypeFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subjectTypeAdded

	err, termsOfServiceUriAdded := retrieveClientTermsOfServiceURIFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || termsOfServiceUriAdded

	err, tokenEndpointAuthMethodAdded := retrieveClientTokenEndpointAuthMethodFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenEndpointAuthMethodAdded

	err, tokenEndpointAuthSigningAlgorithmAdded := retrieveClientTokenEndpointAuthSigningAlgorithmFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenEndpointAuthSigningAlgorithmAdded

	err, updatedAtAdded := retrieveClientUpdatedAtFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	err, userinfoSignedResponseAlgAdded := retrieveClientUserinfoSignedResponseAlgFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userinfoSignedResponseAlgAdded

	err, allowedCorsOriginsAdded := retrieveClientAllowedCorsOriginsFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowedCorsOriginsAdded

	err, audienceAdded := retrieveClientAudienceFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audienceAdded

	err, contactsAdded := retrieveClientContactsFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contactsAdded

	err, grantTypesAdded := retrieveClientGrantTypesFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || grantTypesAdded

	err, jwksAdded := retrieveClientJwksFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jwksAdded

	err, metadataAdded := retrieveClientMetadataFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded

	err, postLogoutRedirectUrisAdded := retrieveClientPostLogoutRedirectUrisFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || postLogoutRedirectUrisAdded

	err, redirectUrisAdded := retrieveClientRedirectUrisFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redirectUrisAdded

	err, requestUrisAdded := retrieveClientRequestUrisFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || requestUrisAdded

	err, responseTypesAdded := retrieveClientResponseTypesFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || responseTypesAdded

	return nil, retAdded
}

func retrieveClientBackChannelLogoutSessionRequiredFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	backChannelLogoutSessionRequiredFlagName := fmt.Sprintf("%v.BackChannelLogoutSessionRequired", cmdPrefix)
	if cmd.Flags().Changed(backChannelLogoutSessionRequiredFlagName) {

		var backChannelLogoutSessionRequiredFlagName string
		if cmdPrefix == "" {
			backChannelLogoutSessionRequiredFlagName = "BackChannelLogoutSessionRequired"
		} else {
			backChannelLogoutSessionRequiredFlagName = fmt.Sprintf("%v.BackChannelLogoutSessionRequired", cmdPrefix)
		}

		backChannelLogoutSessionRequiredFlagValue, err := cmd.Flags().GetBool(backChannelLogoutSessionRequiredFlagName)
		if err != nil {
			return err, false
		}
		m.BackChannelLogoutSessionRequired = backChannelLogoutSessionRequiredFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientBackChannelLogoutURIFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	backChannelLogoutUriFlagName := fmt.Sprintf("%v.BackChannelLogoutURI", cmdPrefix)
	if cmd.Flags().Changed(backChannelLogoutUriFlagName) {

		var backChannelLogoutUriFlagName string
		if cmdPrefix == "" {
			backChannelLogoutUriFlagName = "BackChannelLogoutURI"
		} else {
			backChannelLogoutUriFlagName = fmt.Sprintf("%v.BackChannelLogoutURI", cmdPrefix)
		}

		backChannelLogoutUriFlagValue, err := cmd.Flags().GetString(backChannelLogoutUriFlagName)
		if err != nil {
			return err, false
		}
		m.BackChannelLogoutURI = backChannelLogoutUriFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientClientURIFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	clientUriFlagName := fmt.Sprintf("%v.ClientURI", cmdPrefix)
	if cmd.Flags().Changed(clientUriFlagName) {

		var clientUriFlagName string
		if cmdPrefix == "" {
			clientUriFlagName = "ClientURI"
		} else {
			clientUriFlagName = fmt.Sprintf("%v.ClientURI", cmdPrefix)
		}

		clientUriFlagValue, err := cmd.Flags().GetString(clientUriFlagName)
		if err != nil {
			return err, false
		}
		m.ClientURI = clientUriFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientCreatedAtFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	createdAtFlagName := fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "CreatedAt"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
		}

		createdAtFlagValueStr, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		createdAtFlagValue := strfmt.NewDateTime()
		if err := createdAtFlagValue.UnmarshalText([]byte(createdAtFlagValueStr)); err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientFrontChannelLogoutSessionRequiredFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	frontChannelLogoutSessionRequiredFlagName := fmt.Sprintf("%v.FrontChannelLogoutSessionRequired", cmdPrefix)
	if cmd.Flags().Changed(frontChannelLogoutSessionRequiredFlagName) {

		var frontChannelLogoutSessionRequiredFlagName string
		if cmdPrefix == "" {
			frontChannelLogoutSessionRequiredFlagName = "FrontChannelLogoutSessionRequired"
		} else {
			frontChannelLogoutSessionRequiredFlagName = fmt.Sprintf("%v.FrontChannelLogoutSessionRequired", cmdPrefix)
		}

		frontChannelLogoutSessionRequiredFlagValue, err := cmd.Flags().GetBool(frontChannelLogoutSessionRequiredFlagName)
		if err != nil {
			return err, false
		}
		m.FrontChannelLogoutSessionRequired = frontChannelLogoutSessionRequiredFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientFrontChannelLogoutURIFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	frontChannelLogoutUriFlagName := fmt.Sprintf("%v.FrontChannelLogoutURI", cmdPrefix)
	if cmd.Flags().Changed(frontChannelLogoutUriFlagName) {

		var frontChannelLogoutUriFlagName string
		if cmdPrefix == "" {
			frontChannelLogoutUriFlagName = "FrontChannelLogoutURI"
		} else {
			frontChannelLogoutUriFlagName = fmt.Sprintf("%v.FrontChannelLogoutURI", cmdPrefix)
		}

		frontChannelLogoutUriFlagValue, err := cmd.Flags().GetString(frontChannelLogoutUriFlagName)
		if err != nil {
			return err, false
		}
		m.FrontChannelLogoutURI = frontChannelLogoutUriFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientJSONWebKeysURIFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	jsonWebKeysUriFlagName := fmt.Sprintf("%v.JSONWebKeysURI", cmdPrefix)
	if cmd.Flags().Changed(jsonWebKeysUriFlagName) {

		var jsonWebKeysUriFlagName string
		if cmdPrefix == "" {
			jsonWebKeysUriFlagName = "JSONWebKeysURI"
		} else {
			jsonWebKeysUriFlagName = fmt.Sprintf("%v.JSONWebKeysURI", cmdPrefix)
		}

		jsonWebKeysUriFlagValue, err := cmd.Flags().GetString(jsonWebKeysUriFlagName)
		if err != nil {
			return err, false
		}
		m.JSONWebKeysURI = jsonWebKeysUriFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientLogoURIFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	logoUriFlagName := fmt.Sprintf("%v.LogoURI", cmdPrefix)
	if cmd.Flags().Changed(logoUriFlagName) {

		var logoUriFlagName string
		if cmdPrefix == "" {
			logoUriFlagName = "LogoURI"
		} else {
			logoUriFlagName = fmt.Sprintf("%v.LogoURI", cmdPrefix)
		}

		logoUriFlagValue, err := cmd.Flags().GetString(logoUriFlagName)
		if err != nil {
			return err, false
		}
		m.LogoURI = logoUriFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientNameFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientOutfacingIDFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	outfacingIdFlagName := fmt.Sprintf("%v.OutfacingID", cmdPrefix)
	if cmd.Flags().Changed(outfacingIdFlagName) {

		var outfacingIdFlagName string
		if cmdPrefix == "" {
			outfacingIdFlagName = "OutfacingID"
		} else {
			outfacingIdFlagName = fmt.Sprintf("%v.OutfacingID", cmdPrefix)
		}

		outfacingIdFlagValue, err := cmd.Flags().GetString(outfacingIdFlagName)
		if err != nil {
			return err, false
		}
		m.OutfacingID = outfacingIdFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientOwnerFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	ownerFlagName := fmt.Sprintf("%v.Owner", cmdPrefix)
	if cmd.Flags().Changed(ownerFlagName) {

		var ownerFlagName string
		if cmdPrefix == "" {
			ownerFlagName = "Owner"
		} else {
			ownerFlagName = fmt.Sprintf("%v.Owner", cmdPrefix)
		}

		ownerFlagValue, err := cmd.Flags().GetString(ownerFlagName)
		if err != nil {
			return err, false
		}
		m.Owner = ownerFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientPolicyURIFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	policyUriFlagName := fmt.Sprintf("%v.PolicyURI", cmdPrefix)
	if cmd.Flags().Changed(policyUriFlagName) {

		var policyUriFlagName string
		if cmdPrefix == "" {
			policyUriFlagName = "PolicyURI"
		} else {
			policyUriFlagName = fmt.Sprintf("%v.PolicyURI", cmdPrefix)
		}

		policyUriFlagValue, err := cmd.Flags().GetString(policyUriFlagName)
		if err != nil {
			return err, false
		}
		m.PolicyURI = policyUriFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientRequestObjectSigningAlgorithmFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	requestObjectSigningAlgorithmFlagName := fmt.Sprintf("%v.RequestObjectSigningAlgorithm", cmdPrefix)
	if cmd.Flags().Changed(requestObjectSigningAlgorithmFlagName) {

		var requestObjectSigningAlgorithmFlagName string
		if cmdPrefix == "" {
			requestObjectSigningAlgorithmFlagName = "RequestObjectSigningAlgorithm"
		} else {
			requestObjectSigningAlgorithmFlagName = fmt.Sprintf("%v.RequestObjectSigningAlgorithm", cmdPrefix)
		}

		requestObjectSigningAlgorithmFlagValue, err := cmd.Flags().GetString(requestObjectSigningAlgorithmFlagName)
		if err != nil {
			return err, false
		}
		m.RequestObjectSigningAlgorithm = requestObjectSigningAlgorithmFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientScopeFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	scopeFlagName := fmt.Sprintf("%v.Scope", cmdPrefix)
	if cmd.Flags().Changed(scopeFlagName) {

		var scopeFlagName string
		if cmdPrefix == "" {
			scopeFlagName = "Scope"
		} else {
			scopeFlagName = fmt.Sprintf("%v.Scope", cmdPrefix)
		}

		scopeFlagValue, err := cmd.Flags().GetString(scopeFlagName)
		if err != nil {
			return err, false
		}
		m.Scope = scopeFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientSecretFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	secretFlagName := fmt.Sprintf("%v.Secret", cmdPrefix)
	if cmd.Flags().Changed(secretFlagName) {

		var secretFlagName string
		if cmdPrefix == "" {
			secretFlagName = "Secret"
		} else {
			secretFlagName = fmt.Sprintf("%v.Secret", cmdPrefix)
		}

		secretFlagValue, err := cmd.Flags().GetString(secretFlagName)
		if err != nil {
			return err, false
		}
		m.Secret = secretFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientSecretExpiresAtFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	secretExpiresAtFlagName := fmt.Sprintf("%v.SecretExpiresAt", cmdPrefix)
	if cmd.Flags().Changed(secretExpiresAtFlagName) {

		var secretExpiresAtFlagName string
		if cmdPrefix == "" {
			secretExpiresAtFlagName = "SecretExpiresAt"
		} else {
			secretExpiresAtFlagName = fmt.Sprintf("%v.SecretExpiresAt", cmdPrefix)
		}

		secretExpiresAtFlagValue, err := cmd.Flags().GetInt64(secretExpiresAtFlagName)
		if err != nil {
			return err, false
		}
		m.SecretExpiresAt = secretExpiresAtFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientSectorIdentifierURIFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	sectorIdentifierUriFlagName := fmt.Sprintf("%v.SectorIdentifierURI", cmdPrefix)
	if cmd.Flags().Changed(sectorIdentifierUriFlagName) {

		var sectorIdentifierUriFlagName string
		if cmdPrefix == "" {
			sectorIdentifierUriFlagName = "SectorIdentifierURI"
		} else {
			sectorIdentifierUriFlagName = fmt.Sprintf("%v.SectorIdentifierURI", cmdPrefix)
		}

		sectorIdentifierUriFlagValue, err := cmd.Flags().GetString(sectorIdentifierUriFlagName)
		if err != nil {
			return err, false
		}
		m.SectorIdentifierURI = sectorIdentifierUriFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientSubjectTypeFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	subjectTypeFlagName := fmt.Sprintf("%v.SubjectType", cmdPrefix)
	if cmd.Flags().Changed(subjectTypeFlagName) {

		var subjectTypeFlagName string
		if cmdPrefix == "" {
			subjectTypeFlagName = "SubjectType"
		} else {
			subjectTypeFlagName = fmt.Sprintf("%v.SubjectType", cmdPrefix)
		}

		subjectTypeFlagValue, err := cmd.Flags().GetString(subjectTypeFlagName)
		if err != nil {
			return err, false
		}
		m.SubjectType = subjectTypeFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientTermsOfServiceURIFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	termsOfServiceUriFlagName := fmt.Sprintf("%v.TermsOfServiceURI", cmdPrefix)
	if cmd.Flags().Changed(termsOfServiceUriFlagName) {

		var termsOfServiceUriFlagName string
		if cmdPrefix == "" {
			termsOfServiceUriFlagName = "TermsOfServiceURI"
		} else {
			termsOfServiceUriFlagName = fmt.Sprintf("%v.TermsOfServiceURI", cmdPrefix)
		}

		termsOfServiceUriFlagValue, err := cmd.Flags().GetString(termsOfServiceUriFlagName)
		if err != nil {
			return err, false
		}
		m.TermsOfServiceURI = termsOfServiceUriFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientTokenEndpointAuthMethodFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	tokenEndpointAuthMethodFlagName := fmt.Sprintf("%v.TokenEndpointAuthMethod", cmdPrefix)
	if cmd.Flags().Changed(tokenEndpointAuthMethodFlagName) {

		var tokenEndpointAuthMethodFlagName string
		if cmdPrefix == "" {
			tokenEndpointAuthMethodFlagName = "TokenEndpointAuthMethod"
		} else {
			tokenEndpointAuthMethodFlagName = fmt.Sprintf("%v.TokenEndpointAuthMethod", cmdPrefix)
		}

		tokenEndpointAuthMethodFlagValue, err := cmd.Flags().GetString(tokenEndpointAuthMethodFlagName)
		if err != nil {
			return err, false
		}
		m.TokenEndpointAuthMethod = tokenEndpointAuthMethodFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientTokenEndpointAuthSigningAlgorithmFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	tokenEndpointAuthSigningAlgorithmFlagName := fmt.Sprintf("%v.TokenEndpointAuthSigningAlgorithm", cmdPrefix)
	if cmd.Flags().Changed(tokenEndpointAuthSigningAlgorithmFlagName) {

		var tokenEndpointAuthSigningAlgorithmFlagName string
		if cmdPrefix == "" {
			tokenEndpointAuthSigningAlgorithmFlagName = "TokenEndpointAuthSigningAlgorithm"
		} else {
			tokenEndpointAuthSigningAlgorithmFlagName = fmt.Sprintf("%v.TokenEndpointAuthSigningAlgorithm", cmdPrefix)
		}

		tokenEndpointAuthSigningAlgorithmFlagValue, err := cmd.Flags().GetString(tokenEndpointAuthSigningAlgorithmFlagName)
		if err != nil {
			return err, false
		}
		m.TokenEndpointAuthSigningAlgorithm = tokenEndpointAuthSigningAlgorithmFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientUpdatedAtFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	updatedAtFlagName := fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		var updatedAtFlagName string
		if cmdPrefix == "" {
			updatedAtFlagName = "UpdatedAt"
		} else {
			updatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
		}

		updatedAtFlagValueStr, err := cmd.Flags().GetString(updatedAtFlagName)
		if err != nil {
			return err, false
		}
		updatedAtFlagValue := strfmt.NewDateTime()
		if err := updatedAtFlagValue.UnmarshalText([]byte(updatedAtFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdatedAt = updatedAtFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientUserinfoSignedResponseAlgFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	userinfoSignedResponseAlgFlagName := fmt.Sprintf("%v.UserinfoSignedResponseAlg", cmdPrefix)
	if cmd.Flags().Changed(userinfoSignedResponseAlgFlagName) {

		var userinfoSignedResponseAlgFlagName string
		if cmdPrefix == "" {
			userinfoSignedResponseAlgFlagName = "UserinfoSignedResponseAlg"
		} else {
			userinfoSignedResponseAlgFlagName = fmt.Sprintf("%v.UserinfoSignedResponseAlg", cmdPrefix)
		}

		userinfoSignedResponseAlgFlagValue, err := cmd.Flags().GetString(userinfoSignedResponseAlgFlagName)
		if err != nil {
			return err, false
		}
		m.UserinfoSignedResponseAlg = userinfoSignedResponseAlgFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveClientAllowedCorsOriginsFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	allowedCorsOriginsFlagName := fmt.Sprintf("%v.allowed_cors_origins", cmdPrefix)
	if cmd.Flags().Changed(allowedCorsOriginsFlagName) {
		// warning: allowed_cors_origins array type StringSlicePipeDelimiter is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveClientAudienceFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	audienceFlagName := fmt.Sprintf("%v.audience", cmdPrefix)
	if cmd.Flags().Changed(audienceFlagName) {
		// warning: audience array type StringSlicePipeDelimiter is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveClientContactsFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	contactsFlagName := fmt.Sprintf("%v.contacts", cmdPrefix)
	if cmd.Flags().Changed(contactsFlagName) {
		// warning: contacts array type StringSlicePipeDelimiter is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveClientGrantTypesFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	grantTypesFlagName := fmt.Sprintf("%v.grant_types", cmdPrefix)
	if cmd.Flags().Changed(grantTypesFlagName) {
		// warning: grant_types array type StringSlicePipeDelimiter is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveClientJwksFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	jwksFlagName := fmt.Sprintf("%v.jwks", cmdPrefix)
	if cmd.Flags().Changed(jwksFlagName) {
		// warning: jwks map type JoseJSONWebKeySet is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveClientMetadataFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	metadataFlagName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(metadataFlagName) {
		// warning: metadata map type JSONRawMessage is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveClientPostLogoutRedirectUrisFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	postLogoutRedirectUrisFlagName := fmt.Sprintf("%v.post_logout_redirect_uris", cmdPrefix)
	if cmd.Flags().Changed(postLogoutRedirectUrisFlagName) {
		// warning: post_logout_redirect_uris array type StringSlicePipeDelimiter is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveClientRedirectUrisFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	redirectUrisFlagName := fmt.Sprintf("%v.redirect_uris", cmdPrefix)
	if cmd.Flags().Changed(redirectUrisFlagName) {
		// warning: redirect_uris array type StringSlicePipeDelimiter is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveClientRequestUrisFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	requestUrisFlagName := fmt.Sprintf("%v.request_uris", cmdPrefix)
	if cmd.Flags().Changed(requestUrisFlagName) {
		// warning: request_uris array type StringSlicePipeDelimiter is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveClientResponseTypesFlags(m *models.Client, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	responseTypesFlagName := fmt.Sprintf("%v.response_types", cmdPrefix)
	if cmd.Flags().Changed(responseTypesFlagName) {
		// warning: response_types array type StringSlicePipeDelimiter is not supported by go-swagger cli yet
	}
	return nil, retAdded
}
